name: Build Xornet Server

on: [push, pull_request, workflow_dispatch]

env:
  CARGO_TERM_COLOR: always
  APP_NAME: xornet_server

jobs:
  compile-linux:
    strategy:
      fail-fast: true
      matrix: 
        targetArch:
          - 386
          - amd64
          - arm
          - mips
          - mips64
          - mips64le
          - mipsle
          - s390x
    runs-on: ubuntu-latest
    name: "Compile for Linux"
    steps: 
      - name: ðŸ›Ž Checkout
        uses: actions/checkout@v2
      - name: âš¡ Set Version Variable
        id: version
        run: >
          echo "::set-output name=value::$(cat ./version.txt)"
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.4
        with:
          go-version: '^1.17.1'
      - name: Install Gox
        run: go get github.com/mitchellh/gox
      - name: Compile 
        run: gox -os="linux" -arch="${{matrix.targetArch}}" -output="./dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_{{.OS}}_{{.Arch}}"
      - name: ðŸ’Ž Upload Builds
        uses: actions/upload-artifact@v1
        with:
          name: ${{env.APP_NAME}}_${{ steps.version.outputs.value }}_linux_${{matrix.targetArch}}
          path: dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_linux_${{matrix.targetArch}}

  compile-freebsd:
    strategy:
      fail-fast: true
      matrix: 
        targetArch:
          - 386
          - amd64
          - arm
    runs-on: ubuntu-latest
    name: "Compile for FreeBSD"
    steps: 
      - name: ðŸ›Ž Checkout
        uses: actions/checkout@v2
      - name: âš¡ Set Version Variable
        id: version
        run: >
          echo "::set-output name=value::$(cat ./version.txt)"
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.4
        with:
          go-version: '^1.17.1'
      - name: Install Gox
        run: go get github.com/mitchellh/gox
      - name: Compile 
        run: gox -os="freebsd" -arch="${{matrix.targetArch}}" -output="./dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_{{.OS}}_{{.Arch}}"
      - name: ðŸ’Ž Upload Builds
        uses: actions/upload-artifact@v1
        with:
          name: ${{env.APP_NAME}}_${{ steps.version.outputs.value }}_freebsd_${{matrix.targetArch}}
          path: dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_freebsd_${{matrix.targetArch}}

  compile-netbsd:
    strategy:
      fail-fast: true
      matrix: 
        targetArch:
          - 386
          - amd64
          - arm
    runs-on: ubuntu-latest
    name: "Compile for NetBSD"
    steps: 
      - name: ðŸ›Ž Checkout
        uses: actions/checkout@v2
      - name: âš¡ Set Version Variable
        id: version
        run: >
          echo "::set-output name=value::$(cat ./version.txt)"
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.4
        with:
          go-version: '^1.17.1'
      - name: Install Gox
        run: go get github.com/mitchellh/gox
      - name: Compile 
        run: gox -os="netbsd" -arch="${{matrix.targetArch}}" -output="./dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_{{.OS}}_{{.Arch}}"
      - name: ðŸ’Ž Upload Builds
        uses: actions/upload-artifact@v1
        with:
          name: ${{env.APP_NAME}}_${{ steps.version.outputs.value }}_netbsd_${{matrix.targetArch}}
          path: dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_netbsd_${{matrix.targetArch}}

  compile-openbsd:
    strategy:
      fail-fast: true
      matrix: 
        targetArch:
          - 386
          - amd64
    runs-on: ubuntu-latest
    name: "Compile for OpenBSD"
    steps: 
      - name: ðŸ›Ž Checkout
        uses: actions/checkout@v2
      - name: âš¡ Set Version Variable
        id: version
        run: >
          echo "::set-output name=value::$(cat ./version.txt)"
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.4
        with:
          go-version: '^1.17.1'
      - name: Install Gox
        run: go get github.com/mitchellh/gox
      - name: Compile 
        run: gox -os="openbsd" -arch="${{matrix.targetArch}}" -output="./dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_{{.OS}}_{{.Arch}}"
      - name: ðŸ’Ž Upload Builds
        uses: actions/upload-artifact@v1
        with:
          name: ${{env.APP_NAME}}_${{ steps.version.outputs.value }}_openbsd_${{matrix.targetArch}}
          path: dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_openbsd_${{matrix.targetArch}}
  compile-windows:
    strategy:
      fail-fast: true
      matrix: 
        targetArch:
          - 386
          - amd64
    runs-on: ubuntu-latest
    name: "Compile for Windows"
    steps: 
      - name: ðŸ›Ž Checkout
        uses: actions/checkout@v2
      - name: âš¡ Set Version Variable
        id: version
        run: >
          echo "::set-output name=value::$(cat ./version.txt)"
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.4
        with:
          go-version: '^1.17.1'
      - name: Install Gox
        run: go get github.com/mitchellh/gox
      - name: Compile 
        run: gox -os="windows" -arch="${{matrix.targetArch}}" -output="./dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_{{.OS}}_{{.Arch}}"
      - name: ðŸ’Ž Upload Builds
        uses: actions/upload-artifact@v1
        with:
          name: ${{env.APP_NAME}}_${{ steps.version.outputs.value }}_windows_${{matrix.targetArch}}.exe
          path: dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_windows_${{matrix.targetArch}}.exe

  compile-darwin:
    runs-on: ubuntu-latest
    name: "Compile for Darwin (amd64)"
    steps: 
      - name: ðŸ›Ž Checkout
        uses: actions/checkout@v2
      - name: âš¡ Set Version Variable
        id: version
        run: >
          echo "::set-output name=value::$(cat ./version.txt)"
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.4
        with:
          go-version: '^1.17.1'
      - name: Install Gox
        run: go get github.com/mitchellh/gox
      - name: Compile 
        run: gox -os="darwin" -arch="amd64" -output="./dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_{{.OS}}_{{.Arch}}"
      - name: ðŸ’Ž Upload Builds
        uses: actions/upload-artifact@v1
        with:
          name: ${{env.APP_NAME}}_${{ steps.version.outputs.value }}_darwin_amd64
          path: dist/${{env.APP_NAME}}_${{ steps.version.outputs.value }}_darwin_amd64

  create-release:
    name: "ðŸ“¦ Create Release"
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    needs: [compile-linux, compile-freebsd, compile-netbsd, compile-openbsd, compile-windows, compile-darwin]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{steps.version.outputs.value}}
    steps:
      
      # Yes we get the repo again but only for the version in the package.json
      - name: ðŸ›Ž Checkout
        uses: actions/checkout@v2

      - name: âš¡ Set Version Variable
        id: version
        run: >
          echo "::set-output name=value::$(cat ./version.txt)"
     
      # The release script that prepares a new Github release
      - name: âš¡ Create Release
        if: ${{needs.latest-tag.outputs.tag != steps.version.outputs.value}}
        uses: actions/create-release@v1
        id: create_release
        continue-on-error: true
        with:
          draft: false
          prerelease: false
          release_name: ${{env.APP_NAME}} v${{ steps.version.outputs.value }}
          tag_name: v${{ steps.version.outputs.value }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  upload: 
    name: "ðŸ“¤ Upload Builds"
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    needs: create-release
    strategy:
      matrix: 
        targetPlatform:
          - darwin_amd64
          - freebsd_386
          - freebsd_amd64
          - freebsd_arm
          - linux_386
          - linux_amd64
          - linux_arm
          - linux_mips
          - linux_mips64
          - linux_mips64le
          - linux_mipsle
          - linux_s390x
          - netbsd_386
          - netbsd_amd64
          - netbsd_arm
          - openbsd_386
          - openbsd_amd64
          - windows_386.exe
          - windows_amd64.exe
      fail-fast: false
    steps:

      # Download the artifacts
      - name: ðŸ’Ž Download ${{matrix.targetPlatform}} Binaries
        uses: actions/download-artifact@v2
        with:
          name: ${{env.APP_NAME}}_${{steps.version.outputs.value}}_${{matrix.targetPlatform}}
          path: build/${{env.APP_NAME}}_${{steps.version.outputs.value}}_${{matrix.targetPlatform}}

      # Upload Release
      - name: ðŸ’Ž Upload ${{env.APP_NAME}}_${{steps.version.outputs.value}}_${{matrix.targetPlatform}} Artifact
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: build/${{env.APP_NAME}}_${{steps.version.outputs.value}}_${{matrix.targetPlatform}}
          asset_name: ${{env.APP_NAME}}_${{steps.version.outputs.value}}_${{matrix.targetPlatform}}
          asset_content_type: application/octet-stream